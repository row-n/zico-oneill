!function(){return function e(t,n,i){function r(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return r(n||e)},c,c.exports,e,t,n,i)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}}()({1:[function(e,t,n){"use strict";var i=o(e("jquery")),r=o(e("./plugin"));function o(e){return e&&e.__esModule?e:{default:e}}e("galleriffic"),e("history");(0,r.default)("Gallery",function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=(0,i.default)(t),r=n.find("#thumbnails"),o=r.find(".thumbs__link"),a=n.find("#slideshow"),s=n.find("#slides"),l=n.find("#controls"),u=n.find("#caption"),c=n.find("#loader"),d=n.find("#view");r.galleriffic({delay:2500,numThumbs:60,preloadAhead:-1,enableTopPager:!1,enableBottomPager:!1,maxPagesToShow:1,imageContainerSel:s.selector,controlsContainerSel:l.selector,captionContainerSel:u.selector,loadingContainerSel:c.selector,renderSSControls:!1,renderNavControls:!0,playLinkText:"Play Slideshow",pauseLinkText:"Pause Slideshow",prevLinkText:"&lsaquo;",nextLinkText:"&rsaquo;",prevPageLinkText:"&lsaquo;",nextPageLinkText:"&rsaquo;",enableHistory:!1,autoStart:!1,enableKeyboardNavigation:!0,syncTransitions:!1,defaultTransitionDuration:1e3,onSlideChange:function(e,t){this.find("ul.thumbs").children().eq(e).fadeTo("fast",1).end().eq(t).fadeTo("fast",1)},onPageTransitionOut:function(){this.hide()},onPageTransitionIn:function(){this.show()}});d.on("click",function(e){e.preventDefault(),a.fadeOut(),setTimeout(function(){r.fadeIn()},500)}),o.on("click",function(e){e.preventDefault(),(0,i.default)(window).innerWidth()<=991?e.stopPropagation():(r.fadeOut(),setTimeout(function(){a.fadeIn()},500))}),(0,i.default)(window).innerWidth()<=991&&c.hide(),r.hide(),a.show()})},{"./plugin":2,galleriffic:5,history:6,jquery:7}],2:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};n.default=function(e,t){var n="__"+e,r=t;a.default.fn[e]=function(e){var t=this;return this.each(function(){var o=t,s=o.data(n),l=a.default.extend({},r.DEFAULTS,o.data(),"object"===(void 0===e?"undefined":i(e))&&e);s||o.data(n,s=new r(t,l)),"string"==typeof e&&s[e]()})},a.default.fn[e].noConflict=function(){return a.default.fn[e]}};var r,o=e("jquery"),a=(r=o)&&r.__esModule?r:{default:r}},{jquery:7}],3:[function(e,t,n){"use strict";var i=r(e("jquery"));function r(e){return e&&e.__esModule?e:{default:e}}(0,r(e("./plugin")).default)("Sidebar",function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t=(0,i.default)("#body");(0,i.default)("#trigger").click(function(){t.toggleClass("sidebar-active")})})},{"./plugin":2,jquery:7}],4:[function(e,t,n){"use strict";var i,r=e("jquery"),o=(i=r)&&i.__esModule?i:{default:i};e("./plugins/gallery"),e("./plugins/sidebar"),(0,o.default)("#gallery").Gallery(),(0,o.default)("#sidebar").Sidebar()},{"./plugins/gallery":1,"./plugins/sidebar":3,jquery:7}],5:[function(e,t,n){(function(n){jQuery=n.jQuery=e("/Users/rowan.parkinson/Sites/wordpress/zicooneill/wp-content/themes/zico-oneill/node_modules/jquery/dist/jquery.js");(function(e,t,n){"use strict";!function(e){var t={},n=0;e.galleriffic={version:"2.0.1",normalizeHash:function(e){return e.replace(/^.*#/,"").replace(/\?.*$/,"")},getImage:function(n){if(n)return n=e.galleriffic.normalizeHash(n),t[n]},gotoImage:function(t){var n=e.galleriffic.getImage(t);return!!n&&(n.gallery.gotoImage(n),!0)},removeImageByHash:function(t,n){var i=e.galleriffic.getImage(t);if(!i)return!1;var r=i.gallery;return(!n||n==r)&&r.removeImageByIndex(i.index)}};var r={delay:3e3,numThumbs:20,preloadAhead:40,enableTopPager:!1,enableBottomPager:!0,maxPagesToShow:7,imageContainerSel:"",captionContainerSel:"",controlsContainerSel:"",loadingContainerSel:"",renderSSControls:!0,renderNavControls:!0,playLinkText:"Play",pauseLinkText:"Pause",prevLinkText:"Previous",nextLinkText:"Next",nextPageLinkText:"Next &rsaquo;",prevPageLinkText:"&lsaquo; Prev",enableHistory:!1,enableKeyboardNavigation:!0,autoStart:!1,syncTransitions:!1,defaultTransitionDuration:1e3,onSlideChange:void 0,onTransitionOut:void 0,onTransitionIn:void 0,onPageTransitionOut:void 0,onPageTransitionIn:void 0,onImageAdded:void 0,onImageRemoved:void 0};e.fn.galleriffic=function(o){e.extend(this,{version:e.galleriffic.version,isSlideshowRunning:!1,slideshowTimeout:void 0,clickHandler:function(t,n){if(this.pause(),!this.enableHistory){var i=e.galleriffic.normalizeHash(e(n).attr("href"));e.galleriffic.gotoImage(i),t.preventDefault()}},appendImage:function(e){return this.addImage(e,!1,!1),this},insertImage:function(e,t){return this.addImage(e,!1,!0,t),this},addImage:function(i,r,o,a){var s="string"==typeof i?e(i):i,l=s.find("a.thumbs__link"),u=l.attr("href"),c=l.attr("title"),d=s.find(".thumbs__caption").remove(),f=l.attr("name");n++,f&&!t[""+f]||(f=n),o||(a=this.data.length);var h={title:c,slideUrl:u,caption:d,hash:f,gallery:this,index:a};o?(this.data.splice(a,0,h),this.updateIndices(a)):this.data.push(h);var p=this;return r||this.updateThumbs(function(){var e=p.find("ul.thumbs");o?e.children(":eq("+a+")").before(s):e.append(s),p.onImageAdded&&p.onImageAdded(h,s)}),t[""+f]=h,l.attr("rel","history").attr("href","#"+f).removeAttr("name").click(function(e){p.clickHandler(e,this)}),this},removeImageByIndex:function(e){if(e<0||e>=this.data.length)return!1;var t=this.data[e];return!!t&&(this.removeImage(t),!0)},removeImageByHash:function(t){return e.galleriffic.removeImageByHash(t,this)},removeImage:function(e){var n=e.index;return this.data.splice(n,1),delete t[""+e.hash],this.updateThumbs(function(){var t=a.find("ul.thumbs").children(":eq("+n+")").remove();a.onImageRemoved&&a.onImageRemoved(e,t)}),this.updateIndices(n),this},updateIndices:function(e){for(i=e;i<this.data.length;i++)this.data[i].index=i;return this},initializeThumbs:function(){this.data=[];var t=this;return this.find("ul.thumbs > li").each(function(n){t.addImage(e(this),!0,!1)}),this},isPreloadComplete:!1,preloadInit:function(){if(0==this.preloadAhead)return this;this.preloadStartIndex=this.currentImage.index;var e=this.getNextIndex(this.preloadStartIndex);return this.preloadRecursive(this.preloadStartIndex,e)},preloadRelocate:function(e){return this.preloadStartIndex=e,this},preloadRecursive:function(e,t){if(e!=this.preloadStartIndex){var n=this.getNextIndex(this.preloadStartIndex);return this.preloadRecursive(this.preloadStartIndex,n)}var i=this,r=t-e;if(r<0&&(r=this.data.length-1-e+t),this.preloadAhead>=0&&r>this.preloadAhead)return setTimeout(function(){i.preloadRecursive(e,t)},500),this;var o=this.data[t];if(!o)return this;if(o.image)return this.preloadNext(e,t);var a=new Image;return a.onload=function(){o.image=this,i.preloadNext(e,t)},a.alt=o.title,a.src=o.slideUrl,this},preloadNext:function(e,t){var n=this.getNextIndex(t);if(n==e)this.isPreloadComplete=!0;else{var i=this;setTimeout(function(){i.preloadRecursive(e,n)},100)}return this},getNextIndex:function(e){var t=e+1;return t>=this.data.length&&(t=0),t},getPrevIndex:function(e){var t=e-1;return t<0&&(t=this.data.length-1),t},pause:function(){return this.isSlideshowRunning=!1,this.slideshowTimeout&&(clearTimeout(this.slideshowTimeout),this.slideshowTimeout=void 0),this.$controlsContainer&&this.$controlsContainer.find("div.ss-controls a").removeClass().addClass("play").attr("title",this.playLinkText).attr("href","#play").html(this.playLinkText),this},play:function(){if(this.isSlideshowRunning=!0,this.$controlsContainer&&this.$controlsContainer.find("div.ss-controls a").removeClass().addClass("pause").attr("title",this.pauseLinkText).attr("href","#pause").html(this.pauseLinkText),!this.slideshowTimeout){var e=this;this.slideshowTimeout=setTimeout(function(){e.ssAdvance()},this.delay)}return this},toggleSlideshow:function(){return this.isSlideshowRunning?this.pause():this.play(),this},ssAdvance:function(){return this.isSlideshowRunning&&this.next(!0),this},next:function(e,t){return this.gotoIndex(this.getNextIndex(this.currentImage.index),e,t),this},previous:function(e,t){return this.gotoIndex(this.getPrevIndex(this.currentImage.index),e,t),this},nextPage:function(e,t){var n=this.getCurrentPage();if(n<this.getNumPages()-1){var i=n*this.numThumbs+this.numThumbs;this.gotoIndex(i,e,t)}return this},previousPage:function(e,t){var n=this.getCurrentPage();if(n>0){var i=n*this.numThumbs-this.numThumbs;this.gotoIndex(i,e,t)}return this},gotoIndex:function(t,n,i){n||this.pause(),t<0?t=0:t>=this.data.length&&(t=this.data.length-1);var r=this.data[t];return!i&&this.enableHistory?e.historyLoad(String(r.hash)):this.gotoImage(r),this},gotoImage:function(e){var t=e.index;return this.onSlideChange&&this.onSlideChange(this.currentImage.index,t),this.currentImage=e,this.preloadRelocate(t),this.refresh(),this},getDefaultTransitionDuration:function(e){return e?this.defaultTransitionDuration:this.defaultTransitionDuration/2},refresh:function(){var e=this.currentImage;if(!e)return this;var t=e.index;this.$controlsContainer&&this.$controlsContainer.find("div.controls__nav a.prev").attr("href","#"+this.data[this.getPrevIndex(t)].hash).end().find("div.controls__nav a.next").attr("href","#"+this.data[this.getNextIndex(t)].hash);var n=this.$imageContainer.find("span.current").addClass("previous").removeClass("current"),i=0;this.$captionContainer&&(i=this.$captionContainer.find("span.current").addClass("previous").removeClass("current"));var r=this.syncTransitions&&e.image,o=!0,a=this,s=function(){o=!1,n.remove(),i&&i.remove(),r||(e.image&&e.hash==a.data[a.currentImage.index].hash?a.buildImage(e,r):a.$loadingContainer&&a.$loadingContainer.show())};if(0==n.length?s():this.onTransitionOut?this.onTransitionOut(n,i,r,s):(n.fadeTo(this.getDefaultTransitionDuration(r),0,s),i&&i.fadeTo(this.getDefaultTransitionDuration(r),0)),r&&this.buildImage(e,r),!e.image){var l=new Image;l.onload=function(){e.image=this,o||e.hash!=a.data[a.currentImage.index].hash||a.buildImage(e,r)},l.alt=e.title,l.src=e.slideUrl}return this.relocatePreload=!0,this.syncThumbs()},buildImage:function(e,t){var n=this,i=this.getNextIndex(e.index);if(t)var r=this.$imageContainer.append('<span class="image-wrapper current"><a class="advance-link" rel="history" href="#'+this.data[i].hash+'" title="'+e.title+'">&nbsp;</a></span>').find("span.current").css("opacity","0");else r=this.$imageContainer.html('<span class="image-wrapper current"><a class="advance-link" rel="history" href="#'+this.data[i].hash+'" title="'+e.title+'">&nbsp;</a></span>').find("span.current").css("opacity","0");r.find("a").append(e.image).click(function(e){n.clickHandler(e,this)});var o=0;return this.$captionContainer&&(o=this.$captionContainer.append('<span class="image-caption current"></span>').find("span.current").css("opacity","0").append(e.caption)),this.$loadingContainer&&this.$loadingContainer.hide(),this.onTransitionIn?this.onTransitionIn(r,o,t):(r.fadeTo(this.getDefaultTransitionDuration(t),1),o&&o.fadeTo(this.getDefaultTransitionDuration(t),1)),this.isSlideshowRunning&&(this.slideshowTimeout&&clearTimeout(this.slideshowTimeout),this.slideshowTimeout=setTimeout(function(){n.ssAdvance()},this.delay)),this},getCurrentPage:function(){return Math.floor(this.currentImage.index/this.numThumbs)},syncThumbs:function(){this.getCurrentPage()!=this.displayedPage&&this.updateThumbs();var e=this.find("ul.thumbs").children();return e.filter(".selected").removeClass("selected"),e.eq(this.currentImage.index).addClass("selected"),this},updateThumbs:function(e){var t=this,n=function(){e&&e(),t.rebuildThumbs(),t.onPageTransitionIn?t.onPageTransitionIn():t.show()};return this.onPageTransitionOut?this.onPageTransitionOut(n):(this.hide(),n()),this},rebuildThumbs:function(){var t=this.data.length>this.numThumbs;if(this.enableTopPager){var n=this.find("div.top");0==n.length?n=this.prepend('<div class="top pagination"></div>').find("div.top"):n.empty(),t&&this.buildPager(n)}if(this.enableBottomPager){var i=this.find("div.bottom");0==i.length?i=this.append('<div class="bottom pagination"></div>').find("div.bottom"):i.empty(),t&&this.buildPager(i)}var r=this.getCurrentPage(),o=r*this.numThumbs,a=o+this.numThumbs-1;a>=this.data.length&&(a=this.data.length-1);var s=this.find("ul.thumbs");return s.find("li").each(function(t){var n=e(this);t>=o&&t<=a?n.show():n.hide()}),this.displayedPage=r,s.removeClass("noscript"),this},getNumPages:function(){return Math.ceil(this.data.length/this.numThumbs)},buildPager:function(e){var t=this,n=this.getNumPages(),i=this.getCurrentPage(),r=i*this.numThumbs,o=this.maxPagesToShow-1,a=i-Math.floor((this.maxPagesToShow-1)/2)+1;if(a>0){var s=n-a;s<o&&(a-=o-s)}if(a<0&&(a=0),i>0){var l=r-this.numThumbs;e.append('<a rel="history" class="pprev" href="#'+this.data[l].hash+'" title="'+this.prevPageLinkText+'">'+this.prevPageLinkText+"</a>")}for(a>0&&(this.buildPageLink(e,0,n),a>1&&e.append('<span class="ellipsis">&hellip;</span>'),o--);o>0;)this.buildPageLink(e,a,n),o--,a++;if(a<n){var u=n-1;a<u&&e.append('<span class="ellipsis">&hellip;</span>'),this.buildPageLink(e,u,n)}var c=r+this.numThumbs;return c<this.data.length&&e.append('<a rel="history" class="pnext" href="#'+this.data[c].hash+'" title="'+this.nextPageLinkText+'">'+this.nextPageLinkText+"</a>"),e.find("a").click(function(e){t.clickHandler(e,this)}),this},buildPageLink:function(e,t,n){var i=t+1;if(t==this.getCurrentPage())e.append('<span class="current">'+i+"</span>");else if(t<n){var r=t*this.numThumbs;e.append('<a rel="history" href="#'+this.data[r].hash+'" title="'+i+'">'+i+"</a>")}return this}}),e.extend(this,r,o),this.enableHistory&&!e.historyInit&&(this.enableHistory=!1),this.imageContainerSel&&(this.$imageContainer=e(this.imageContainerSel)),this.captionContainerSel&&(this.$captionContainer=e(this.captionContainerSel)),this.loadingContainerSel&&(this.$loadingContainer=e(this.loadingContainerSel)),this.initializeThumbs(),this.maxPagesToShow<3&&(this.maxPagesToShow=3),this.displayedPage=-1,this.currentImage=this.data[0];var a=this;this.$loadingContainer&&this.$loadingContainer.hide(),this.controlsContainerSel&&(this.$controlsContainer=e(this.controlsContainerSel).empty(),this.renderSSControls&&(this.autoStart?this.$controlsContainer.append('<div class="ss-controls"><a href="#pause" class="pause" title="'+this.pauseLinkText+'"><span>'+this.pauseLinkText+"</span></a></div>"):this.$controlsContainer.append('<div class="ss-controls"><a href="#play" class="play" title="'+this.playLinkText+'"><span>'+this.playLinkText+"</span></a></div>"),this.$controlsContainer.find("div.ss-controls a").click(function(e){return a.toggleSlideshow(),e.preventDefault(),!1})),this.renderNavControls&&this.$controlsContainer.append('<div class="controls__nav"><a class="prev" rel="history" title="'+this.prevLinkText+'">'+this.prevLinkText+'</a><a class="next" rel="history" title="'+this.nextLinkText+'">'+this.nextLinkText+"</a></div>").find("div.controls__nav a").click(function(e){a.clickHandler(e,this)}));var s=!this.enableHistory||!location.hash;if(this.enableHistory&&location.hash){var l=e.galleriffic.normalizeHash(location.hash);t[l]||(s=!0)}return s&&this.gotoIndex(0,!1,!0),this.enableKeyboardNavigation&&e(document).keydown(function(e){switch(e.charCode?e.charCode:e.keyCode?e.keyCode:0){case 32:a.next();break;case 33:a.previousPage(),e.preventDefault();break;case 34:a.nextPage(),e.preventDefault();break;case 35:a.gotoIndex(a.data.length-1),e.preventDefault();break;case 36:a.gotoIndex(0),e.preventDefault();break;case 37:a.previous();break;case 39:a.next()}}),this.autoStart&&this.play(),setTimeout(function(){a.preloadInit()},1e3),this}}(jQuery)}).call(n,t,void 0,void 0)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"/Users/rowan.parkinson/Sites/wordpress/zicooneill/wp-content/themes/zico-oneill/node_modules/jquery/dist/jquery.js":7}],6:[function(e,t,n){(function(n){jQuery=n.jQuery=e("/Users/rowan.parkinson/Sites/wordpress/zicooneill/wp-content/themes/zico-oneill/node_modules/jquery/dist/jquery.js");(function(e,t,n){"use strict";jQuery.extend({historyCurrentHash:void 0,historyCallback:void 0,historyIframeSrc:void 0,historyInit:function(e,t){jQuery.historyCallback=e,t&&(jQuery.historyIframeSrc=t);var n=location.hash.replace(/\?.*$/,"");if(jQuery.historyCurrentHash=n,jQuery.browser.msie){""==jQuery.historyCurrentHash&&(jQuery.historyCurrentHash="#"),jQuery("body").prepend('<iframe id="jQuery_history" style="display: none;"'+(jQuery.historyIframeSrc?' src="'+jQuery.historyIframeSrc+'"':"")+"></iframe>");var i=jQuery("#jQuery_history")[0].contentWindow.document;i.open(),i.close(),i.location.hash=n}else jQuery.browser.safari&&(jQuery.historyBackStack=[],jQuery.historyBackStack.length=history.length,jQuery.historyForwardStack=[],jQuery.lastHistoryLength=history.length,jQuery.isFirst=!0);n&&jQuery.historyCallback(n.replace(/^#/,"")),setInterval(jQuery.historyCheck,100)},historyAddHistory:function(e){jQuery.historyBackStack.push(e),jQuery.historyForwardStack.length=0,this.isFirst=!0},historyCheck:function(){if(jQuery.browser.msie){var e=jQuery("#jQuery_history")[0];(r=(e.contentDocument||e.contentWindow.document).location.hash.replace(/\?.*$/,""))!=jQuery.historyCurrentHash&&(location.hash=r,jQuery.historyCurrentHash=r,jQuery.historyCallback(r.replace(/^#/,"")))}else if(jQuery.browser.safari){if(jQuery.lastHistoryLength==history.length&&jQuery.historyBackStack.length>jQuery.lastHistoryLength&&jQuery.historyBackStack.shift(),!jQuery.dontCheck){var t=history.length-jQuery.historyBackStack.length;if(jQuery.lastHistoryLength=history.length,t){if(jQuery.isFirst=!1,t<0)for(var n=0;n<Math.abs(t);n++)jQuery.historyForwardStack.unshift(jQuery.historyBackStack.pop());else for(n=0;n<t;n++)jQuery.historyBackStack.push(jQuery.historyForwardStack.shift());var i=jQuery.historyBackStack[jQuery.historyBackStack.length-1];null!=i&&(jQuery.historyCurrentHash=location.hash.replace(/\?.*$/,""),jQuery.historyCallback(i))}else if(null==jQuery.historyBackStack[jQuery.historyBackStack.length-1]&&!jQuery.isFirst){if(location.hash){var r=location.hash;jQuery.historyCallback(location.hash.replace(/^#/,""))}else{r="";jQuery.historyCallback("")}jQuery.isFirst=!0}}}else{(r=location.hash.replace(/\?.*$/,""))!=jQuery.historyCurrentHash&&(jQuery.historyCurrentHash=r,jQuery.historyCallback(r.replace(/^#/,"")))}},historyLoad:function(e){var t;if(e=decodeURIComponent(e.replace(/\?.*$/,"")),jQuery.browser.safari?t=e:(t="#"+e,location.hash=t),jQuery.historyCurrentHash=t,jQuery.browser.msie){var n=jQuery("#jQuery_history")[0].contentWindow.document;n.open(),n.close(),n.location.hash=t,jQuery.lastHistoryLength=history.length,jQuery.historyCallback(e)}else if(jQuery.browser.safari){jQuery.dontCheck=!0,this.historyAddHistory(e);window.setTimeout(function(){jQuery.dontCheck=!1},200),jQuery.historyCallback(e),location.hash=t}else jQuery.historyCallback(e)}})}).call(n,t,void 0,void 0)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"/Users/rowan.parkinson/Sites/wordpress/zicooneill/wp-content/themes/zico-oneill/node_modules/jquery/dist/jquery.js":7}],7:[function(e,t,n){(function(e){(function(e,t,n,i,r){var o,a;o="undefined"!=typeof window?window:this,a=function(e,t){var n=[],r=e.document,o=n.slice,a=n.concat,s=n.push,l=n.indexOf,u={},c=u.toString,d=u.hasOwnProperty,f={},h=function(e,t){return new h.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,g=/^-ms-/,m=/-([\da-z])/gi,y=function(e,t){return t.toUpperCase()};function v(e){var t=!!e&&"length"in e&&e.length,n=h.type(e);return"function"!==n&&!h.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}h.fn=h.prototype={jquery:"1.12.4",constructor:h,selector:"",length:0,toArray:function(){return o.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:o.call(this)},pushStack:function(e){var t=h.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return h.each(this,e)},map:function(e){return this.pushStack(h.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},h.extend=h.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||h.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(r=arguments[s]))for(i in r)e=a[i],a!==(n=r[i])&&(u&&n&&(h.isPlainObject(n)||(t=h.isArray(n)))?(t?(t=!1,o=e&&h.isArray(e)?e:[]):o=e&&h.isPlainObject(e)?e:{},a[i]=h.extend(u,o,n)):void 0!==n&&(a[i]=n));return a},h.extend({expando:"jQuery"+("1.12.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===h.type(e)},isArray:Array.isArray||function(e){return"array"===h.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!h.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==h.type(e)||e.nodeType||h.isWindow(e))return!1;try{if(e.constructor&&!d.call(e,"constructor")&&!d.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!f.ownFirst)for(t in e)return d.call(e,t);for(t in e);return void 0===t||d.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[c.call(e)]||"object":typeof e},globalEval:function(t){t&&h.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(g,"ms-").replace(m,y)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(v(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(v(Object(e))?h.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){var i;if(t){if(l)return l.call(t,e,n);for(i=t.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;)e[r++]=t[i++];if(n!=n)for(;void 0!==t[i];)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(v(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return a.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(r=e[t],t=e,e=r),h.isFunction(e))return n=o.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(o.call(arguments)))}).guid=e.guid=e.guid||h.guid++,i},now:function(){return+new Date},support:f}),"function"==typeof Symbol&&(h.fn[Symbol.iterator]=n[Symbol.iterator]),h.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});var x=function(e){var t,n,i,r,o,a,s,l,u,c,d,f,h,p,g,m,y,v,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,k=oe(),S=oe(),j=oe(),N=function(e,t){return e===t&&(d=!0),0},E=1<<31,L={}.hasOwnProperty,D=[],A=D.pop,H=D.push,I=D.push,q=D.slice,P=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",M="\\["+O+"*("+F+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+O+"*\\]",R=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",B=new RegExp(O+"+","g"),$=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),Q=new RegExp("^"+O+"*,"+O+"*"),W=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),z=new RegExp("="+O+"*([^\\]'\"]*?)"+O+"*\\]","g"),X=new RegExp(R),U=new RegExp("^"+F+"$"),V={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,ee=/'|\\/g,te=new RegExp("\\\\([\\da-f]{1,6}"+O+"?|("+O+")|.)","ig"),ne=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ie=function(){f()};try{I.apply(D=q.call(w.childNodes),w.childNodes),D[w.childNodes.length].nodeType}catch(e){I={apply:D.length?function(e,t){H.apply(e,q.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function re(e,t,i,r){var o,s,u,c,d,p,y,v,T=t&&t.ownerDocument,C=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return i;if(!r&&((t?t.ownerDocument||t:w)!==h&&f(t),t=t||h,g)){if(11!==C&&(p=K.exec(e)))if(o=p[1]){if(9===C){if(!(u=t.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(T&&(u=T.getElementById(o))&&x(t,u)&&u.id===o)return i.push(u),i}else{if(p[2])return I.apply(i,t.getElementsByTagName(e)),i;if((o=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!j[e+" "]&&(!m||!m.test(e))){if(1!==C)T=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(ee,"\\$&"):t.setAttribute("id",c=b),s=(y=a(e)).length,d=U.test(c)?"#"+c:"[id='"+c+"']";s--;)y[s]=d+" "+ge(y[s]);v=y.join(","),T=Z.test(e)&&he(t.parentNode)||t}if(v)try{return I.apply(i,T.querySelectorAll(v)),i}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return l(e.replace($,"$1"),t,i,r)}function oe(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[b]=!0,e}function se(e){var t=h.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||E)-(~e.sourceIndex||E);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ce(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))})})}function he(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=re.support={},o=re.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},f=re.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;return a!==h&&9===a.nodeType&&a.documentElement?(p=(h=a).documentElement,g=!o(h),(r=h.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(h.getElementsByClassName),n.getById=se(function(e){return p.appendChild(e).id=b,!h.getElementsByName||!h.getElementsByName(b).length}),n.getById?(i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}},i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=J.test(h.querySelectorAll))&&(se(function(e){p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+O+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+O+"*(?:value|"+_+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]")}),se(function(e){var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+O+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=J.test(v=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&se(function(e){n.disconnectedMatch=v.call(e,"div"),v.call(e,"[s!='']:x"),y.push("!=",R)}),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=J.test(p.compareDocumentPosition),x=t||J.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},N=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===h||e.ownerDocument===w&&x(w,e)?-1:t===h||t.ownerDocument===w&&x(w,t)?1:c?P(c,e)-P(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e===h?-1:t===h?1:r?-1:o?1:c?P(c,e)-P(c,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?ue(a[i],s[i]):a[i]===w?-1:s[i]===w?1:0},h):h},re.matches=function(e,t){return re(e,null,null,t)},re.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&f(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!j[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var i=v.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return re(t,h,null,[e]).length>0},re.contains=function(e,t){return(e.ownerDocument||e)!==h&&f(e),x(e,t)},re.attr=function(e,t){(e.ownerDocument||e)!==h&&f(e);var r=i.attrHandle[t.toLowerCase()],o=r&&L.call(i.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},re.uniqueSort=function(e){var t,i=[],r=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(N),d){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=re.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=re.selectors={cacheLength:50,createPseudo:ae,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||re.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&re.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&k(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=re.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(B," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,f,h,p,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s,x=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===y:1===f.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&v){for(x=(h=(u=(c=(d=(f=m)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===T&&u[1])&&u[2],f=h&&m.childNodes[h];f=++h&&f&&f[g]||(x=h=0)||p.pop();)if(1===f.nodeType&&++x&&f===t){c[e]=[T,h,x];break}}else if(v&&(x=h=(u=(c=(d=(f=t)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===T&&u[1]),!1===x)for(;(f=++h&&f&&f[g]||(x=h=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==y:1!==f.nodeType)||!++x||(v&&((c=(d=f[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[T,x]),f!==t)););return(x-=r)===i||x%i==0&&x/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=P(e,o[a])]=!(n[i]=o[a])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=s(e.replace($,"$1"));return i[b]?ae(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return re(e,t).length>0}}),contains:ae(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return U.test(e||"")||re.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,n){return[n<0?n+t:n]}),even:fe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:fe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:fe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:fe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=ce(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=de(t);function pe(){}function ge(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function me(e,t,n){var i=t.dir,r=n&&"parentNode"===i,o=C++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,o)}:function(t,n,a){var s,l,u,c=[T,o];if(a){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,a))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if((s=(l=(u=t[b]||(t[b]={}))[t.uniqueID]||(u[t.uniqueID]={}))[i])&&s[0]===T&&s[1]===o)return c[2]=s[2];if(l[i]=c,c[2]=e(t,n,a))return!0}}}function ye(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function ve(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),u&&t.push(s)));return a}function xe(e,t,n,i,r,o){return i&&!i[b]&&(i=xe(i)),r&&!r[b]&&(r=xe(r,o)),ae(function(o,a,s,l){var u,c,d,f=[],h=[],p=a.length,g=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)re(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?g:ve(g,f,e,s,l),y=n?r||(o?e:p||i)?[]:a:m;if(n&&n(m,y,s,l),i)for(u=ve(y,h),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(y[h[c]]=!(m[h[c]]=d));if(o){if(r||e){if(r){for(u=[],c=y.length;c--;)(d=y[c])&&u.push(m[c]=d);r(null,y=[],u,l)}for(c=y.length;c--;)(d=y[c])&&(u=r?P(o,d):f[c])>-1&&(o[u]=!(a[u]=d))}}else y=ve(y===a?y.splice(p,y.length):y),r?r(null,a,y,l):I.apply(a,y)})}function be(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,c=me(function(e){return e===t},s,!0),d=me(function(e){return P(t,e)>-1},s,!0),f=[function(e,n,i){var r=!a&&(i||n!==u)||((t=n).nodeType?c(e,n,i):d(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])f=[me(ye(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[b]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return xe(l>1&&ye(f),l>1&&ge(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace($,"$1"),n,l<r&&be(e.slice(l,r)),r<o&&be(e=e.slice(r)),r<o&&ge(e))}f.push(n)}return ye(f)}return pe.prototype=i.filters=i.pseudos,i.setFilters=new pe,a=re.tokenize=function(e,t){var n,r,o,a,s,l,u,c=S[e+" "];if(c)return t?0:c.slice(0);for(s=e,l=[],u=i.preFilter;s;){for(a in n&&!(r=Q.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=W.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace($," ")}),s=s.slice(n.length)),i.filter)!(r=V[a].exec(s))||u[a]&&!(r=u[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?re.error(e):S(e,l).slice(0)},s=re.compile=function(e,t){var n,r,o,s,l,c,d=[],p=[],m=j[e+" "];if(!m){for(t||(t=a(e)),n=t.length;n--;)(m=be(t[n]))[b]?d.push(m):p.push(m);(m=j(e,(r=p,s=(o=d).length>0,l=r.length>0,c=function(e,t,n,a,c){var d,p,m,y=0,v="0",x=e&&[],b=[],w=u,C=e||l&&i.find.TAG("*",c),k=T+=null==w?1:Math.random()||.1,S=C.length;for(c&&(u=t===h||t||c);v!==S&&null!=(d=C[v]);v++){if(l&&d){for(p=0,t||d.ownerDocument===h||(f(d),n=!g);m=r[p++];)if(m(d,t||h,n)){a.push(d);break}c&&(T=k)}s&&((d=!m&&d)&&y--,e&&x.push(d))}if(y+=v,s&&v!==y){for(p=0;m=o[p++];)m(x,b,t,n);if(e){if(y>0)for(;v--;)x[v]||b[v]||(b[v]=A.call(a));b=ve(b)}I.apply(a,b),c&&!e&&b.length>0&&y+o.length>1&&re.uniqueSort(a)}return c&&(T=k,u=w),x},s?ae(c):c))).selector=e}return m},l=re.select=function(e,t,r,o){var l,u,c,d,f,h="function"==typeof e&&e,p=!o&&a(e=h.selector||e);if(r=r||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&n.getById&&9===t.nodeType&&g&&i.relative[u[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return r;h&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(l=V.needsContext.test(e)?0:u.length;l--&&(c=u[l],!i.relative[d=c.type]);)if((f=i.find[d])&&(o=f(c.matches[0].replace(te,ne),Z.test(u[0].type)&&he(t.parentNode)||t))){if(u.splice(l,1),!(e=o.length&&ge(u)))return I.apply(r,o),r;break}}return(h||s(e,p))(o,t,!g,r,!t||Z.test(e)&&he(t.parentNode)||t),r},n.sortStable=b.split("").sort(N).join("")===b,n.detectDuplicates=!!d,f(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(h.createElement("div"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||le(_,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),re}(e);h.find=x,h.expr=x.selectors,h.expr[":"]=h.expr.pseudos,h.uniqueSort=h.unique=x.uniqueSort,h.text=x.getText,h.isXMLDoc=x.isXML,h.contains=x.contains;var b=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&h(e).is(n))break;i.push(e)}return i},w=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},T=h.expr.match.needsContext,C=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,k=/^.[^:#\[\.,]*$/;function S(e,t,n){if(h.isFunction(t))return h.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return h.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(k.test(t))return h.filter(t,e,n);t=h.filter(t,e)}return h.grep(e,function(e){return h.inArray(e,t)>-1!==n})}h.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?h.find.matchesSelector(i,e)?[i]:[]:h.find.matches(e,h.grep(t,function(e){return 1===e.nodeType}))},h.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if("string"!=typeof e)return this.pushStack(h(e).filter(function(){for(t=0;t<r;t++)if(h.contains(i[t],this))return!0}));for(t=0;t<r;t++)h.find(e,i[t],n);return(n=this.pushStack(r>1?h.unique(n):n)).selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(S(this,e||[],!1))},not:function(e){return this.pushStack(S(this,e||[],!0))},is:function(e){return!!S(this,"string"==typeof e&&T.test(e)?h(e):e||[],!1).length}});var j,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(h.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||j,"string"==typeof e){if(!(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:N.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof h?t[0]:t,h.merge(this,h.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),C.test(i[1])&&h.isPlainObject(t))for(i in t)h.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}if((o=r.getElementById(i[2]))&&o.parentNode){if(o.id!==i[2])return j.find(e);this.length=1,this[0]=o}return this.context=r,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):h.isFunction(e)?void 0!==n.ready?n.ready(e):e(h):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),h.makeArray(e,this))}).prototype=h.fn,j=h(r);var E=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}h.fn.extend({has:function(e){var t,n=h(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++)if(h.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],a=T.test(e)||"string"!=typeof e?h(e,t||this.context):0;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&h.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?h.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?h.inArray(this[0],h(e)):h.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(h.uniqueSort(h.merge(this.get(),h(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),h.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b(e,"parentNode")},parentsUntil:function(e,t,n){return b(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return b(e,"nextSibling")},prevAll:function(e){return b(e,"previousSibling")},nextUntil:function(e,t,n){return b(e,"nextSibling",n)},prevUntil:function(e,t,n){return b(e,"previousSibling",n)},siblings:function(e){return w((e.parentNode||{}).firstChild,e)},children:function(e){return w(e.firstChild)},contents:function(e){return h.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:h.merge([],e.childNodes)}},function(e,t){h.fn[e]=function(n,i){var r=h.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=h.filter(i,r)),this.length>1&&(L[e]||(r=h.uniqueSort(r)),E.test(e)&&(r=r.reverse())),this.pushStack(r)}});var A,H,I=/\S+/g;function q(){r.addEventListener?(r.removeEventListener("DOMContentLoaded",P),e.removeEventListener("load",P)):(r.detachEvent("onreadystatechange",P),e.detachEvent("onload",P))}function P(){(r.addEventListener||"load"===e.event.type||"complete"===r.readyState)&&(q(),h.ready())}for(H in h.Callbacks=function(e){var t,n;e="string"==typeof e?(t=e,n={},h.each(t.match(I)||[],function(e,t){n[t]=!0}),n):h.extend({},e);var i,r,o,a,s=[],l=[],u=-1,c=function(){for(a=e.once,o=i=!0;l.length;u=-1)for(r=l.shift();++u<s.length;)!1===s[u].apply(r[0],r[1])&&e.stopOnFalse&&(u=s.length,r=!1);e.memory||(r=!1),i=!1,a&&(s=r?[]:"")},d={add:function(){return s&&(r&&!i&&(u=s.length-1,l.push(r)),function t(n){h.each(n,function(n,i){h.isFunction(i)?e.unique&&d.has(i)||s.push(i):i&&i.length&&"string"!==h.type(i)&&t(i)})}(arguments),r&&!i&&c()),this},remove:function(){return h.each(arguments,function(e,t){for(var n;(n=h.inArray(t,s,n))>-1;)s.splice(n,1),n<=u&&u--}),this},has:function(e){return e?h.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return a=l=[],s=r="",this},disabled:function(){return!s},lock:function(){return a=!0,r||d.disable(),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),i||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!o}};return d},h.extend({Deferred:function(e){var t=[["resolve","done",h.Callbacks("once memory"),"resolved"],["reject","fail",h.Callbacks("once memory"),"rejected"],["notify","progress",h.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return h.Deferred(function(n){h.each(t,function(t,o){var a=h.isFunction(e[t])&&e[t];r[o[1]](function(){var e=a&&a.apply(this,arguments);e&&h.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?h.extend(e,i):i}},r={};return i.pipe=i.then,h.each(t,function(e,o){var a=o[2],s=o[3];i[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=a.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,a=o.call(arguments),s=a.length,l=1!==s||e&&h.isFunction(e.promise)?s:0,u=1===l?e:h.Deferred(),c=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?o.call(arguments):r,i===t?u.notifyWith(n,i):--l||u.resolveWith(n,i)}};if(s>1)for(t=new Array(s),n=new Array(s),i=new Array(s);r<s;r++)a[r]&&h.isFunction(a[r].promise)?a[r].promise().progress(c(r,n,t)).done(c(r,i,a)).fail(u.reject):--l;return l||u.resolveWith(i,a),u.promise()}}),h.fn.ready=function(e){return h.ready.promise().done(e),this},h.extend({isReady:!1,readyWait:1,holdReady:function(e){e?h.readyWait++:h.ready(!0)},ready:function(e){(!0===e?--h.readyWait:h.isReady)||(h.isReady=!0,!0!==e&&--h.readyWait>0||(A.resolveWith(r,[h]),h.fn.triggerHandler&&(h(r).triggerHandler("ready"),h(r).off("ready"))))}}),h.ready.promise=function(t){if(!A)if(A=h.Deferred(),"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll)e.setTimeout(h.ready);else if(r.addEventListener)r.addEventListener("DOMContentLoaded",P),e.addEventListener("load",P);else{r.attachEvent("onreadystatechange",P),e.attachEvent("onload",P);var n=!1;try{n=null==e.frameElement&&r.documentElement}catch(e){}n&&n.doScroll&&function t(){if(!h.isReady){try{n.doScroll("left")}catch(n){return e.setTimeout(t,50)}q(),h.ready()}}()}return A.promise(t)},h.ready.promise(),h(f))break;f.ownFirst="0"===H,f.inlineBlockNeedsLayout=!1,h(function(){var e,t,n,i;(n=r.getElementsByTagName("body")[0])&&n.style&&(t=r.createElement("div"),(i=r.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),void 0!==t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",f.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=r.createElement("div");f.deleteExpando=!0;try{delete e.test}catch(e){f.deleteExpando=!1}e=null}();var _,O=function(e){var t=h.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)},F=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,M=/([A-Z])/g;function R(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(M,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:F.test(n)?h.parseJSON(n):n)}catch(e){}h.data(e,t,n)}else n=void 0}return n}function B(e){var t;for(t in e)if(("data"!==t||!h.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function $(e,t,i,r){if(O(e)){var o,a,s=h.expando,l=e.nodeType,u=l?h.cache:e,c=l?e[s]:e[s]&&s;if(c&&u[c]&&(r||u[c].data)||void 0!==i||"string"!=typeof t)return c||(c=l?e[s]=n.pop()||h.guid++:s),u[c]||(u[c]=l?{}:{toJSON:h.noop}),"object"!=typeof t&&"function"!=typeof t||(r?u[c]=h.extend(u[c],t):u[c].data=h.extend(u[c].data,t)),a=u[c],r||(a.data||(a.data={}),a=a.data),void 0!==i&&(a[h.camelCase(t)]=i),"string"==typeof t?null==(o=a[t])&&(o=a[h.camelCase(t)]):o=a,o}}function Q(e,t,n){if(O(e)){var i,r,o=e.nodeType,a=o?h.cache:e,s=o?e[h.expando]:h.expando;if(a[s]){if(t&&(i=n?a[s]:a[s].data)){r=(t=h.isArray(t)?t.concat(h.map(t,h.camelCase)):t in i?[t]:(t=h.camelCase(t))in i?[t]:t.split(" ")).length;for(;r--;)delete i[t[r]];if(n?!B(i):!h.isEmptyObject(i))return}(n||(delete a[s].data,B(a[s])))&&(o?h.cleanData([e],!0):f.deleteExpando||a!=a.window?delete a[s]:a[s]=void 0)}}}h.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?h.cache[e[h.expando]]:e[h.expando])&&!B(e)},data:function(e,t,n){return $(e,t,n)},removeData:function(e,t){return Q(e,t)},_data:function(e,t,n){return $(e,t,n,!0)},_removeData:function(e,t){return Q(e,t,!0)}}),h.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=h.data(o),1===o.nodeType&&!h._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&R(o,i=h.camelCase(i.slice(5)),r[i]);h._data(o,"parsedAttrs",!0)}return r}return"object"==typeof e?this.each(function(){h.data(this,e)}):arguments.length>1?this.each(function(){h.data(this,e,t)}):o?R(o,e,h.data(o,e)):void 0},removeData:function(e){return this.each(function(){h.removeData(this,e)})}}),h.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=h._data(e,t),n&&(!i||h.isArray(n)?i=h._data(e,t,h.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=h.queue(e,t),i=n.length,r=n.shift(),o=h._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){h.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return h._data(e,n)||h._data(e,n,{empty:h.Callbacks("once memory").add(function(){h._removeData(e,t+"queue"),h._removeData(e,n)})})}}),h.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?h.queue(this[0],e):void 0===t?this:this.each(function(){var n=h.queue(this,e,t);h._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&h.dequeue(this,e)})},dequeue:function(e){return this.each(function(){h.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=h.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=h._data(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}}),f.shrinkWrapBlocks=function(){return null!=_?_:(_=!1,(t=r.getElementsByTagName("body")[0])&&t.style?(e=r.createElement("div"),(n=r.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),void 0!==e.style.zoom&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(r.createElement("div")).style.width="5px",_=3!==e.offsetWidth),t.removeChild(n),_):void 0);var e,t,n};var W=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,z=new RegExp("^(?:([+-])=|)("+W+")([a-z%]*)$","i"),X=["Top","Right","Bottom","Left"],U=function(e,t){return e=t||e,"none"===h.css(e,"display")||!h.contains(e.ownerDocument,e)};function V(e,t,n,i){var r,o=1,a=20,s=i?function(){return i.cur()}:function(){return h.css(e,t,"")},l=s(),u=n&&n[3]||(h.cssNumber[t]?"":"px"),c=(h.cssNumber[t]||"px"!==u&&+l)&&z.exec(h.css(e,t));if(c&&c[3]!==u)for(u=u||c[3],n=n||[],c=+l||1;c/=o=o||".5",h.style(e,t,c+u),o!==(o=s()/l)&&1!==o&&--a;);return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var G,Y,J,K=function(e,t,n,i,r,o,a){var s=0,l=e.length,u=null==n;if("object"===h.type(n))for(s in r=!0,n)K(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,h.isFunction(i)||(a=!0),u&&(a?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(h(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:u?t.call(e):l?t(e[0],n):o},Z=/^(?:checkbox|radio)$/i,ee=/<([\w:-]+)/,te=/^$|\/(?:java|ecma)script/i,ne=/^\s+/,ie="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function re(e){var t=ie.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}G=r.createElement("div"),Y=r.createDocumentFragment(),J=r.createElement("input"),G.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",f.leadingWhitespace=3===G.firstChild.nodeType,f.tbody=!G.getElementsByTagName("tbody").length,f.htmlSerialize=!!G.getElementsByTagName("link").length,f.html5Clone="<:nav></:nav>"!==r.createElement("nav").cloneNode(!0).outerHTML,J.type="checkbox",J.checked=!0,Y.appendChild(J),f.appendChecked=J.checked,G.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!G.cloneNode(!0).lastChild.defaultValue,Y.appendChild(G),(J=r.createElement("input")).setAttribute("type","radio"),J.setAttribute("checked","checked"),J.setAttribute("name","t"),G.appendChild(J),f.checkClone=G.cloneNode(!0).cloneNode(!0).lastChild.checked,f.noCloneEvent=!!G.addEventListener,G[h.expando]=1,f.attributes=!G.getAttribute(h.expando);var oe={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:f.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};function ae(e,t){var n,i,r=0,o=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(i=n[r]);r++)!t||h.nodeName(i,t)?o.push(i):h.merge(o,ae(i,t));return void 0===t||t&&h.nodeName(e,t)?h.merge([e],o):o}function se(e,t){for(var n,i=0;null!=(n=e[i]);i++)h._data(n,"globalEval",!t||h._data(t[i],"globalEval"))}oe.optgroup=oe.option,oe.tbody=oe.tfoot=oe.colgroup=oe.caption=oe.thead,oe.th=oe.td;var le=/<|&#?\w+;/,ue=/<tbody/i;function ce(e){Z.test(e.type)&&(e.defaultChecked=e.checked)}function de(e,t,n,i,r){for(var o,a,s,l,u,c,d,p=e.length,g=re(t),m=[],y=0;y<p;y++)if((a=e[y])||0===a)if("object"===h.type(a))h.merge(m,a.nodeType?[a]:a);else if(le.test(a)){for(l=l||g.appendChild(t.createElement("div")),u=(ee.exec(a)||["",""])[1].toLowerCase(),d=oe[u]||oe._default,l.innerHTML=d[1]+h.htmlPrefilter(a)+d[2],o=d[0];o--;)l=l.lastChild;if(!f.leadingWhitespace&&ne.test(a)&&m.push(t.createTextNode(ne.exec(a)[0])),!f.tbody)for(o=(a="table"!==u||ue.test(a)?"<table>"!==d[1]||ue.test(a)?0:l:l.firstChild)&&a.childNodes.length;o--;)h.nodeName(c=a.childNodes[o],"tbody")&&!c.childNodes.length&&a.removeChild(c);for(h.merge(m,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=g.lastChild}else m.push(t.createTextNode(a));for(l&&g.removeChild(l),f.appendChecked||h.grep(ae(m,"input"),ce),y=0;a=m[y++];)if(i&&h.inArray(a,i)>-1)r&&r.push(a);else if(s=h.contains(a.ownerDocument,a),l=ae(g.appendChild(a),"script"),s&&se(l),n)for(o=0;a=l[o++];)te.test(a.type||"")&&n.push(a);return l=null,g}!function(){var t,n,i=r.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(f[t]=n in e)||(i.setAttribute(n,"t"),f[t]=!1===i.attributes[n].expando);i=null}();var fe=/^(?:input|select|textarea)$/i,he=/^key/,pe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ge=/^(?:focusinfocus|focusoutblur)$/,me=/^([^.]*)(?:\.(.+)|)/;function ye(){return!0}function ve(){return!1}function xe(){try{return r.activeElement}catch(e){}}function be(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)be(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=ve;else if(!r)return e;return 1===o&&(a=r,(r=function(e){return h().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=h.guid++)),e.each(function(){h.event.add(this,t,r,i,n)})}h.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,u,c,d,f,p,g,m,y=h._data(e);if(y){for(n.handler&&(n=(l=n).handler,r=l.selector),n.guid||(n.guid=h.guid++),(a=y.events)||(a=y.events={}),(c=y.handle)||((c=y.handle=function(e){return void 0===h||e&&h.event.triggered===e.type?void 0:h.event.dispatch.apply(c.elem,arguments)}).elem=e),s=(t=(t||"").match(I)||[""]).length;s--;)p=m=(o=me.exec(t[s])||[])[1],g=(o[2]||"").split(".").sort(),p&&(u=h.event.special[p]||{},p=(r?u.delegateType:u.bindType)||p,u=h.event.special[p]||{},d=h.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&h.expr.match.needsContext.test(r),namespace:g.join(".")},l),(f=a[p])||((f=a[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,i,g,c)||(e.addEventListener?e.addEventListener(p,c,!1):e.attachEvent&&e.attachEvent("on"+p,c))),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,d):f.push(d),h.event.global[p]=!0);e=null}},remove:function(e,t,n,i,r){var o,a,s,l,u,c,d,f,p,g,m,y=h.hasData(e)&&h._data(e);if(y&&(c=y.events)){for(u=(t=(t||"").match(I)||[""]).length;u--;)if(p=m=(s=me.exec(t[u])||[])[1],g=(s[2]||"").split(".").sort(),p){for(d=h.event.special[p]||{},f=c[p=(i?d.delegateType:d.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;o--;)a=f[o],!r&&m!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||i&&i!==a.selector&&("**"!==i||!a.selector)||(f.splice(o,1),a.selector&&f.delegateCount--,d.remove&&d.remove.call(e,a));l&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,g,y.handle)||h.removeEvent(e,p,y.handle),delete c[p])}else for(p in c)h.event.remove(e,p+t[u],n,i,!0);h.isEmptyObject(c)&&(delete y.handle,h._removeData(e,"events"))}},trigger:function(t,n,i,o){var a,s,l,u,c,f,p,g=[i||r],m=d.call(t,"type")?t.type:t,y=d.call(t,"namespace")?t.namespace.split("."):[];if(l=f=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!ge.test(m+h.event.triggered)&&(m.indexOf(".")>-1&&(m=(y=m.split(".")).shift(),y.sort()),s=m.indexOf(":")<0&&"on"+m,(t=t[h.expando]?t:new h.Event(m,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=y.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:h.makeArray(n,[t]),c=h.event.special[m]||{},o||!c.trigger||!1!==c.trigger.apply(i,n))){if(!o&&!c.noBubble&&!h.isWindow(i)){for(u=c.delegateType||m,ge.test(u+m)||(l=l.parentNode);l;l=l.parentNode)g.push(l),f=l;f===(i.ownerDocument||r)&&g.push(f.defaultView||f.parentWindow||e)}for(p=0;(l=g[p++])&&!t.isPropagationStopped();)t.type=p>1?u:c.bindType||m,(a=(h._data(l,"events")||{})[t.type]&&h._data(l,"handle"))&&a.apply(l,n),(a=s&&l[s])&&a.apply&&O(l)&&(t.result=a.apply(l,n),!1===t.result&&t.preventDefault());if(t.type=m,!o&&!t.isDefaultPrevented()&&(!c._default||!1===c._default.apply(g.pop(),n))&&O(i)&&s&&i[m]&&!h.isWindow(i)){(f=i[s])&&(i[s]=null),h.event.triggered=m;try{i[m]()}catch(e){}h.event.triggered=void 0,f&&(i[s]=f)}return t.result}},dispatch:function(e){e=h.event.fix(e);var t,n,i,r,a,s,l=o.call(arguments),u=(h._data(this,"events")||{})[e.type]||[],c=h.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,e)){for(s=h.event.handlers.call(this,e,u),t=0;(r=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(a.namespace)||(e.handleObj=a,e.data=a.data,void 0!==(i=((h.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,l))&&!1===(e.result=i)&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(i=[],n=0;n<s;n++)void 0===i[r=(o=t[n]).selector+" "]&&(i[r]=o.needsContext?h(r,this).index(l)>-1:h.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&a.push({elem:l,handlers:i})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[h.expando])return e;var t,n,i,o=e.type,a=e,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=pe.test(o)?this.mouseHooks:he.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new h.Event(a),t=i.length;t--;)e[n=i[t]]=a[n];return e.target||(e.target=a.srcElement||r),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,a):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,o,a=t.button,s=t.fromElement;return null==e.pageX&&null!=t.clientX&&(o=(i=e.target.ownerDocument||r).documentElement,n=i.body,e.pageX=t.clientX+(o&&o.scrollLeft||n&&n.scrollLeft||0)-(o&&o.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(o&&o.scrollTop||n&&n.scrollTop||0)-(o&&o.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&s&&(e.relatedTarget=s===e.target?t.toElement:s),e.which||void 0===a||(e.which=1&a?1:2&a?3:4&a?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==xe()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===xe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(h.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return h.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var i=h.extend(new h.Event,n,{type:e,isSimulated:!0});h.event.trigger(i,null,t),i.isDefaultPrevented()&&n.preventDefault()}},h.removeEvent=r.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var i="on"+t;e.detachEvent&&(void 0===e[i]&&(e[i]=null),e.detachEvent(i,n))},h.Event=function(e,t){if(!(this instanceof h.Event))return new h.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ye:ve):this.type=e,t&&h.extend(this,t),this.timeStamp=e&&e.timeStamp||h.now(),this[h.expando]=!0},h.Event.prototype={constructor:h.Event,isDefaultPrevented:ve,isPropagationStopped:ve,isImmediatePropagationStopped:ve,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ye,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ye,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ye,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},h.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){h.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||h.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),f.submit||(h.event.special.submit={setup:function(){if(h.nodeName(this,"form"))return!1;h.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=h.nodeName(t,"input")||h.nodeName(t,"button")?h.prop(t,"form"):void 0;n&&!h._data(n,"submit")&&(h.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),h._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&h.event.simulate("submit",this.parentNode,e))},teardown:function(){if(h.nodeName(this,"form"))return!1;h.event.remove(this,"._submit")}}),f.change||(h.event.special.change={setup:function(){if(fe.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(h.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),h.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),h.event.simulate("change",this,e)})),!1;h.event.add(this,"beforeactivate._change",function(e){var t=e.target;fe.test(t.nodeName)&&!h._data(t,"change")&&(h.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||h.event.simulate("change",this.parentNode,e)}),h._data(t,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return h.event.remove(this,"._change"),!fe.test(this.nodeName)}}),f.focusin||h.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){h.event.simulate(t,e.target,h.event.fix(e))};h.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=h._data(i,t);r||i.addEventListener(e,n,!0),h._data(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=h._data(i,t)-1;r?h._data(i,t,r):(i.removeEventListener(e,n,!0),h._removeData(i,t))}}}),h.fn.extend({on:function(e,t,n,i){return be(this,e,t,n,i)},one:function(e,t,n,i){return be(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,h(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ve),this.each(function(){h.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){h.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return h.event.trigger(e,t,n,!0)}});var we=/ jQuery\d+="(?:null|\d+)"/g,Te=new RegExp("<(?:"+ie+")[\\s/>]","i"),Ce=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Se=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^true\/(.*)/,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Ee=re(r).appendChild(r.createElement("div"));function Le(e,t){return h.nodeName(e,"table")&&h.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function De(e){return e.type=(null!==h.find.attr(e,"type"))+"/"+e.type,e}function Ae(e){var t=je.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function He(e,t){if(1===t.nodeType&&h.hasData(e)){var n,i,r,o=h._data(e),a=h._data(t,o),s=o.events;if(s)for(n in delete a.handle,a.events={},s)for(i=0,r=s[n].length;i<r;i++)h.event.add(t,n,s[n][i]);a.data&&(a.data=h.extend({},a.data))}}function Ie(e,t){var n,i,r;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!f.noCloneEvent&&t[h.expando]){for(i in(r=h._data(t)).events)h.removeEvent(t,i,r.handle);t.removeAttribute(h.expando)}"script"===n&&t.text!==e.text?(De(t).text=e.text,Ae(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),f.html5Clone&&e.innerHTML&&!h.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Z.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function qe(e,t,n,i){t=a.apply([],t);var r,o,s,l,u,c,d=0,p=e.length,g=p-1,m=t[0],y=h.isFunction(m);if(y||p>1&&"string"==typeof m&&!f.checkClone&&Se.test(m))return e.each(function(r){var o=e.eq(r);y&&(t[0]=m.call(this,r,o.html())),qe(o,t,n,i)});if(p&&(r=(c=de(t,e[0].ownerDocument,!1,e,i)).firstChild,1===c.childNodes.length&&(c=r),r||i)){for(s=(l=h.map(ae(c,"script"),De)).length;d<p;d++)o=c,d!==g&&(o=h.clone(o,!0,!0),s&&h.merge(l,ae(o,"script"))),n.call(e[d],o,d);if(s)for(u=l[l.length-1].ownerDocument,h.map(l,Ae),d=0;d<s;d++)o=l[d],te.test(o.type||"")&&!h._data(o,"globalEval")&&h.contains(u,o)&&(o.src?h._evalUrl&&h._evalUrl(o.src):h.globalEval((o.text||o.textContent||o.innerHTML||"").replace(Ne,"")));c=r=null}return e}function Pe(e,t,n){for(var i,r=t?h.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||h.cleanData(ae(i)),i.parentNode&&(n&&h.contains(i.ownerDocument,i)&&se(ae(i,"script")),i.parentNode.removeChild(i));return e}h.extend({htmlPrefilter:function(e){return e.replace(Ce,"<$1></$2>")},clone:function(e,t,n){var i,r,o,a,s,l=h.contains(e.ownerDocument,e);if(f.html5Clone||h.isXMLDoc(e)||!Te.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(Ee.innerHTML=e.outerHTML,Ee.removeChild(o=Ee.firstChild)),!(f.noCloneEvent&&f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||h.isXMLDoc(e)))for(i=ae(o),s=ae(e),a=0;null!=(r=s[a]);++a)i[a]&&Ie(r,i[a]);if(t)if(n)for(s=s||ae(e),i=i||ae(o),a=0;null!=(r=s[a]);a++)He(r,i[a]);else He(e,o);return(i=ae(o,"script")).length>0&&se(i,!l&&ae(e,"script")),i=s=r=null,o},cleanData:function(e,t){for(var i,r,o,a,s=0,l=h.expando,u=h.cache,c=f.attributes,d=h.event.special;null!=(i=e[s]);s++)if((t||O(i))&&(a=(o=i[l])&&u[o])){if(a.events)for(r in a.events)d[r]?h.event.remove(i,r):h.removeEvent(i,r,a.handle);u[o]&&(delete u[o],c||void 0===i.removeAttribute?i[l]=void 0:i.removeAttribute(l),n.push(o))}}}),h.fn.extend({domManip:qe,detach:function(e){return Pe(this,e,!0)},remove:function(e){return Pe(this,e)},text:function(e){return K(this,function(e){return void 0===e?h.text(this):this.empty().append((this[0]&&this[0].ownerDocument||r).createTextNode(e))},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&h.cleanData(ae(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&h.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return h.clone(this,e,t)})},html:function(e){return K(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(we,""):void 0;if("string"==typeof e&&!ke.test(e)&&(f.htmlSerialize||!Te.test(e))&&(f.leadingWhitespace||!ne.test(e))&&!oe[(ee.exec(e)||["",""])[1].toLowerCase()]){e=h.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(h.cleanData(ae(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return qe(this,arguments,function(t){var n=this.parentNode;h.inArray(this,e)<0&&(h.cleanData(ae(this)),n&&n.replaceChild(t,this))},e)}}),h.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){h.fn[e]=function(e){for(var n,i=0,r=[],o=h(e),a=o.length-1;i<=a;i++)n=i===a?this:this.clone(!0),h(o[i])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var _e,Oe={HTML:"block",BODY:"block"};function Fe(e,t){var n=h(t.createElement(e)).appendTo(t.body),i=h.css(n[0],"display");return n.detach(),i}function Me(e){var t=r,n=Oe[e];return n||("none"!==(n=Fe(e,t))&&n||((t=((_e=(_e||h("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentWindow||_e[0].contentDocument).document).write(),t.close(),n=Fe(e,t),_e.detach()),Oe[e]=n),n}var Re=/^margin/,Be=new RegExp("^("+W+")(?!px)[a-z%]+$","i"),$e=function(e,t,n,i){var r,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=a[o];return r},Qe=r.documentElement;!function(){var t,n,i,o,a,s,l=r.createElement("div"),u=r.createElement("div");function c(){var c,d,f=r.documentElement;f.appendChild(l),u.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",t=i=s=!1,n=a=!0,e.getComputedStyle&&(d=e.getComputedStyle(u),t="1%"!==(d||{}).top,s="2px"===(d||{}).marginLeft,i="4px"===(d||{width:"4px"}).width,u.style.marginRight="50%",n="4px"===(d||{marginRight:"4px"}).marginRight,(c=u.appendChild(r.createElement("div"))).style.cssText=u.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",u.style.width="1px",a=!parseFloat((e.getComputedStyle(c)||{}).marginRight),u.removeChild(c)),u.style.display="none",(o=0===u.getClientRects().length)&&(u.style.display="",u.innerHTML="<table><tr><td></td><td>t</td></tr></table>",u.childNodes[0].style.borderCollapse="separate",(c=u.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(o=0===c[0].offsetHeight)&&(c[0].style.display="",c[1].style.display="none",o=0===c[0].offsetHeight)),f.removeChild(l)}u.style&&(u.style.cssText="float:left;opacity:.5",f.opacity="0.5"===u.style.opacity,f.cssFloat=!!u.style.cssFloat,u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===u.style.backgroundClip,(l=r.createElement("div")).style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",u.innerHTML="",l.appendChild(u),f.boxSizing=""===u.style.boxSizing||""===u.style.MozBoxSizing||""===u.style.WebkitBoxSizing,h.extend(f,{reliableHiddenOffsets:function(){return null==t&&c(),o},boxSizingReliable:function(){return null==t&&c(),i},pixelMarginRight:function(){return null==t&&c(),n},pixelPosition:function(){return null==t&&c(),t},reliableMarginRight:function(){return null==t&&c(),a},reliableMarginLeft:function(){return null==t&&c(),s}}))}();var We,ze,Xe=/^(top|right|bottom|left)$/;function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}e.getComputedStyle?(We=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},ze=function(e,t,n){var i,r,o,a,s=e.style;return""!==(a=(n=n||We(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==a||h.contains(e.ownerDocument,e)||(a=h.style(e,t)),n&&!f.pixelMarginRight()&&Be.test(a)&&Re.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o),void 0===a?a:a+""}):Qe.currentStyle&&(We=function(e){return e.currentStyle},ze=function(e,t,n){var i,r,o,a,s=e.style;return null==(a=(n=n||We(e))?n[t]:void 0)&&s&&s[t]&&(a=s[t]),Be.test(a)&&!Xe.test(t)&&(i=s.left,(o=(r=e.runtimeStyle)&&r.left)&&(r.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=i,o&&(r.left=o)),void 0===a?a:a+""||"auto"});var Ve=/alpha\([^)]*\)/i,Ge=/opacity\s*=\s*([^)]*)/i,Ye=/^(none|table(?!-c[ea]).+)/,Je=new RegExp("^("+W+")(.*)$","i"),Ke={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"},et=["Webkit","O","Moz","ms"],tt=r.createElement("div").style;function nt(e){if(e in tt)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=et.length;n--;)if((e=et[n]+t)in tt)return e}function it(e,t){for(var n,i,r,o=[],a=0,s=e.length;a<s;a++)(i=e[a]).style&&(o[a]=h._data(i,"olddisplay"),n=i.style.display,t?(o[a]||"none"!==n||(i.style.display=""),""===i.style.display&&U(i)&&(o[a]=h._data(i,"olddisplay",Me(i.nodeName)))):(r=U(i),(n&&"none"!==n||!r)&&h._data(i,"olddisplay",r?n:h.css(i,"display"))));for(a=0;a<s;a++)(i=e[a]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[a]||"":"none"));return e}function rt(e,t,n){var i=Je.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function ot(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,a=0;o<4;o+=2)"margin"===n&&(a+=h.css(e,n+X[o],!0,r)),i?("content"===n&&(a-=h.css(e,"padding"+X[o],!0,r)),"margin"!==n&&(a-=h.css(e,"border"+X[o]+"Width",!0,r))):(a+=h.css(e,"padding"+X[o],!0,r),"padding"!==n&&(a+=h.css(e,"border"+X[o]+"Width",!0,r)));return a}function at(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,o=We(e),a=f.boxSizing&&"border-box"===h.css(e,"boxSizing",!1,o);if(r<=0||null==r){if(((r=ze(e,t,o))<0||null==r)&&(r=e.style[t]),Be.test(r))return r;i=a&&(f.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+ot(e,t,n||(a?"border":"content"),i,o)+"px"}function st(e,t,n,i,r){return new st.prototype.init(e,t,n,i,r)}h.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:f.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=h.camelCase(t),l=e.style;if(t=h.cssProps[s]||(h.cssProps[s]=nt(s)||s),a=h.cssHooks[t]||h.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:l[t];if("string"===(o=typeof n)&&(r=z.exec(n))&&r[1]&&(n=V(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(h.cssNumber[s]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){var r,o,a,s=h.camelCase(t);return t=h.cssProps[s]||(h.cssProps[s]=nt(s)||s),(a=h.cssHooks[t]||h.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=ze(e,t,i)),"normal"===o&&t in Ze&&(o=Ze[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),h.each(["height","width"],function(e,t){h.cssHooks[t]={get:function(e,n,i){if(n)return Ye.test(h.css(e,"display"))&&0===e.offsetWidth?$e(e,Ke,function(){return at(e,t,i)}):at(e,t,i)},set:function(e,n,i){var r=i&&We(e);return rt(0,n,i?ot(e,t,i,f.boxSizing&&"border-box"===h.css(e,"boxSizing",!1,r),r):0)}}}),f.opacity||(h.cssHooks.opacity={get:function(e,t){return Ge.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=h.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===h.trim(o.replace(Ve,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=Ve.test(o)?o.replace(Ve,r):o+" "+r)}}),h.cssHooks.marginRight=Ue(f.reliableMarginRight,function(e,t){if(t)return $e(e,{display:"inline-block"},ze,[e,"marginRight"])}),h.cssHooks.marginLeft=Ue(f.reliableMarginLeft,function(e,t){if(t)return(parseFloat(ze(e,"marginLeft"))||(h.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),h.each({margin:"",padding:"",border:"Width"},function(e,t){h.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+X[i]+t]=o[i]||o[i-2]||o[0];return r}},Re.test(e)||(h.cssHooks[e+t].set=rt)}),h.fn.extend({css:function(e,t){return K(this,function(e,t,n){var i,r,o={},a=0;if(h.isArray(t)){for(i=We(e),r=t.length;a<r;a++)o[t[a]]=h.css(e,t[a],!1,i);return o}return void 0!==n?h.style(e,t,n):h.css(e,t)},e,t,arguments.length>1)},show:function(){return it(this,!0)},hide:function(){return it(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){U(this)?h(this).show():h(this).hide()})}}),h.Tween=st,st.prototype={constructor:st,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||h.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(h.cssNumber[n]?"":"px")},cur:function(){var e=st.propHooks[this.prop];return e&&e.get?e.get(this):st.propHooks._default.get(this)},run:function(e){var t,n=st.propHooks[this.prop];return this.options.duration?this.pos=t=h.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):st.propHooks._default.set(this),this}},st.prototype.init.prototype=st.prototype,st.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=h.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){h.fx.step[e.prop]?h.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[h.cssProps[e.prop]]&&!h.cssHooks[e.prop]?e.elem[e.prop]=e.now:h.style(e.elem,e.prop,e.now+e.unit)}}},st.propHooks.scrollTop=st.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},h.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},h.fx=st.prototype.init,h.fx.step={};var lt,ut,ct,dt,ft,ht,pt,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;function yt(){return e.setTimeout(function(){lt=void 0}),lt=h.now()}function vt(e,t){var n,i={height:e},r=0;for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=X[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function xt(e,t,n){for(var i,r=(bt.tweeners[t]||[]).concat(bt.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function bt(e,t,n){var i,r,o=0,a=bt.prefilters.length,s=h.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=lt||yt(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(i);return s.notifyWith(e,[u,i,n]),i<1&&a?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:h.extend({},t),opts:h.extend(!0,{specialEasing:{},easing:h.easing._default},n),originalProperties:t,originalOptions:n,startTime:lt||yt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=h.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=h.camelCase(n)],o=e[n],h.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=h.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);o<a;o++)if(i=bt.prefilters[o].call(u,e,c,u.opts))return h.isFunction(i.stop)&&(h._queueHooks(u.elem,u.opts.queue).stop=h.proxy(i.stop,i)),i;return h.map(c,xt,u),h.isFunction(u.opts.start)&&u.opts.start.call(e,u),h.fx.timer(h.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}h.Animation=h.extend(bt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return V(n.elem,e,z.exec(t),n),n}]},tweener:function(e,t){h.isFunction(e)?(t=e,e=["*"]):e=e.match(I);for(var n,i=0,r=e.length;i<r;i++)n=e[i],bt.tweeners[n]=bt.tweeners[n]||[],bt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,u,c=this,d={},p=e.style,g=e.nodeType&&U(e),m=h._data(e,"fxshow");for(i in n.queue||(null==(s=h._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,c.always(function(){c.always(function(){s.unqueued--,h.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],"inline"===("none"===(u=h.css(e,"display"))?h._data(e,"olddisplay")||Me(e.nodeName):u)&&"none"===h.css(e,"float")&&(f.inlineBlockNeedsLayout&&"inline"!==Me(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.shrinkWrapBlocks()||c.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),t)if(r=t[i],gt.exec(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}d[i]=m&&m[i]||h.style(e,i)}else u=void 0;if(h.isEmptyObject(d))"inline"===("none"===u?Me(e.nodeName):u)&&(p.display=u);else for(i in m?"hidden"in m&&(g=m.hidden):m=h._data(e,"fxshow",{}),o&&(m.hidden=!g),g?h(e).show():c.done(function(){h(e).hide()}),c.done(function(){var t;for(t in h._removeData(e,"fxshow"),d)h.style(e,t,d[t])}),d)a=xt(g?m[i]:0,i,c),i in m||(m[i]=a.start,g&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}],prefilter:function(e,t){t?bt.prefilters.unshift(e):bt.prefilters.push(e)}}),h.speed=function(e,t,n){var i=e&&"object"==typeof e?h.extend({},e):{complete:n||!n&&t||h.isFunction(e)&&e,duration:e,easing:n&&t||t&&!h.isFunction(t)&&t};return i.duration=h.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in h.fx.speeds?h.fx.speeds[i.duration]:h.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){h.isFunction(i.old)&&i.old.call(this),i.queue&&h.dequeue(this,i.queue)},i},h.fn.extend({fadeTo:function(e,t,n,i){return this.filter(U).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=h.isEmptyObject(e),o=h.speed(t,n,i),a=function(){var t=bt(this,h.extend({},e),o);(r||h._data(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=h.timers,a=h._data(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&mt.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||h.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=h._data(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=h.timers,a=i?i.length:0;for(n.finish=!0,h.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),h.each(["toggle","show","hide"],function(e,t){var n=h.fn[t];h.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(vt(t,!0),e,i,r)}}),h.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){h.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),h.timers=[],h.fx.tick=function(){var e,t=h.timers,n=0;for(lt=h.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||h.fx.stop(),lt=void 0},h.fx.timer=function(e){h.timers.push(e),e()?h.fx.start():h.timers.pop()},h.fx.interval=13,h.fx.start=function(){ut||(ut=e.setInterval(h.fx.tick,h.fx.interval))},h.fx.stop=function(){e.clearInterval(ut),ut=null},h.fx.speeds={slow:600,fast:200,_default:400},h.fn.delay=function(t,n){return t=h.fx&&h.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},dt=r.createElement("input"),ft=r.createElement("div"),ht=r.createElement("select"),pt=ht.appendChild(r.createElement("option")),(ft=r.createElement("div")).setAttribute("className","t"),ft.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ct=ft.getElementsByTagName("a")[0],dt.setAttribute("type","checkbox"),ft.appendChild(dt),(ct=ft.getElementsByTagName("a")[0]).style.cssText="top:1px",f.getSetAttribute="t"!==ft.className,f.style=/top/.test(ct.getAttribute("style")),f.hrefNormalized="/a"===ct.getAttribute("href"),f.checkOn=!!dt.value,f.optSelected=pt.selected,f.enctype=!!r.createElement("form").enctype,ht.disabled=!0,f.optDisabled=!pt.disabled,(dt=r.createElement("input")).setAttribute("value",""),f.input=""===dt.getAttribute("value"),dt.value="t",dt.setAttribute("type","radio"),f.radioValue="t"===dt.value;var wt=/\r/g,Tt=/[\x20\t\r\n\f]+/g;h.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=h.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,h(this).val()):e)?r="":"number"==typeof r?r+="":h.isArray(r)&&(r=h.map(r,function(e){return null==e?"":e+""})),(t=h.valHooks[this.type]||h.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=h.valHooks[r.type]||h.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(wt,""):null==n?"":n:void 0}}),h.extend({valHooks:{option:{get:function(e){var t=h.find.attr(e,"value");return null!=t?t:h.trim(h.text(e)).replace(Tt," ")}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||r<0,a=o?null:[],s=o?r+1:i.length,l=r<0?s:o?r:0;l<s;l++)if(((n=i[l]).selected||l===r)&&(f.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!h.nodeName(n.parentNode,"optgroup"))){if(t=h(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=h.makeArray(t),a=r.length;a--;)if(i=r[a],h.inArray(h.valHooks.option.get(i),o)>-1)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),r}}}}),h.each(["radio","checkbox"],function(){h.valHooks[this]={set:function(e,t){if(h.isArray(t))return e.checked=h.inArray(h(e).val(),t)>-1}},f.checkOn||(h.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct,kt,St=h.expr.attrHandle,jt=/^(?:checked|selected)$/i,Nt=f.getSetAttribute,Et=f.input;h.fn.extend({attr:function(e,t){return K(this,h.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){h.removeAttr(this,e)})}}),h.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?h.prop(e,t,n):(1===o&&h.isXMLDoc(e)||(t=t.toLowerCase(),r=h.attrHooks[t]||(h.expr.match.bool.test(t)?kt:Ct)),void 0!==n?null===n?void h.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=h.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&h.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(I);if(o&&1===e.nodeType)for(;n=o[r++];)i=h.propFix[n]||n,h.expr.match.bool.test(n)?Et&&Nt||!jt.test(n)?e[i]=!1:e[h.camelCase("default-"+n)]=e[i]=!1:h.attr(e,n,""),e.removeAttribute(Nt?n:i)}}),kt={set:function(e,t,n){return!1===t?h.removeAttr(e,n):Et&&Nt||!jt.test(n)?e.setAttribute(!Nt&&h.propFix[n]||n,n):e[h.camelCase("default-"+n)]=e[n]=!0,n}},h.each(h.expr.match.bool.source.match(/\w+/g),function(e,t){var n=St[t]||h.find.attr;Et&&Nt||!jt.test(t)?St[t]=function(e,t,i){var r,o;return i||(o=St[t],St[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,St[t]=o),r}:St[t]=function(e,t,n){if(!n)return e[h.camelCase("default-"+t)]?t.toLowerCase():null}}),Et&&Nt||(h.attrHooks.value={set:function(e,t,n){if(!h.nodeName(e,"input"))return Ct&&Ct.set(e,t,n);e.defaultValue=t}}),Nt||(Ct={set:function(e,t,n){var i=e.getAttributeNode(n);if(i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n))return t}},St.id=St.name=St.coords=function(e,t,n){var i;if(!n)return(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},h.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:Ct.set},h.attrHooks.contenteditable={set:function(e,t,n){Ct.set(e,""!==t&&t,n)}},h.each(["width","height"],function(e,t){h.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),f.style||(h.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Lt=/^(?:input|select|textarea|button|object)$/i,Dt=/^(?:a|area)$/i;h.fn.extend({prop:function(e,t){return K(this,h.prop,e,t,arguments.length>1)},removeProp:function(e){return e=h.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),h.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&h.isXMLDoc(e)||(t=h.propFix[t]||t,r=h.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=h.find.attr(e,"tabindex");return t?parseInt(t,10):Lt.test(e.nodeName)||Dt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.hrefNormalized||h.each(["href","src"],function(e,t){h.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),f.optSelected||(h.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),h.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){h.propFix[this.toLowerCase()]=this}),f.enctype||(h.propFix.enctype="encoding");var At=/[\t\r\n\f]/g;function Ht(e){return h.attr(e,"class")||""}h.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(h.isFunction(e))return this.each(function(t){h(this).addClass(e.call(this,t,Ht(this)))});if("string"==typeof e&&e)for(t=e.match(I)||[];n=this[l++];)if(r=Ht(n),i=1===n.nodeType&&(" "+r+" ").replace(At," ")){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=h.trim(i))&&h.attr(n,"class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(h.isFunction(e))return this.each(function(t){h(this).removeClass(e.call(this,t,Ht(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(I)||[];n=this[l++];)if(r=Ht(n),i=1===n.nodeType&&(" "+r+" ").replace(At," ")){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=h.trim(i))&&h.attr(n,"class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):h.isFunction(e)?this.each(function(n){h(this).toggleClass(e.call(this,n,Ht(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=h(this),o=e.match(I)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=Ht(this))&&h._data(this,"__className__",t),h.attr(this,"class",t||!1===e?"":h._data(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Ht(n)+" ").replace(At," ").indexOf(t)>-1)return!0;return!1}}),h.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){h.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),h.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var It=e.location,qt=h.now(),Pt=/\?/,_t=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;h.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,i=null,r=h.trim(t+"");return r&&!h.trim(r.replace(_t,function(e,t,r,o){return n&&t&&(i=0),0===i?e:(n=r||t,i+=!o-!r,"")}))?Function("return "+r)():h.error("Invalid JSON: "+t)},h.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(i=new e.DOMParser,n=i.parseFromString(t,"text/xml")):((n=new e.ActiveXObject("Microsoft.XMLDOM")).async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||h.error("Invalid XML: "+t),n};var Ot=/#.*$/,Ft=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Rt=/^(?:GET|HEAD)$/,Bt=/^\/\//,$t=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Qt={},Wt={},zt="*/".concat("*"),Xt=It.href,Ut=$t.exec(Xt.toLowerCase())||[];function Vt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(I)||[];if(h.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Gt(e,t,n,i){var r={},o=e===Wt;function a(s){var l;return r[s]=!0,h.each(e[s]||[],function(e,s){var u=s(t,n,i);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Yt(e,t){var n,i,r=h.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&h.extend(!0,e,n),e}h.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Xt,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ut[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":h.parseJSON,"text xml":h.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Yt(Yt(e,h.ajaxSettings),t):Yt(h.ajaxSettings,e)},ajaxPrefilter:Vt(Qt),ajaxTransport:Vt(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,r,o,a,s,l,u,c,d=h.ajaxSetup({},n),f=d.context||d,p=d.context&&(f.nodeType||f.jquery)?h(f):h.event,g=h.Deferred(),m=h.Callbacks("once memory"),y=d.statusCode||{},v={},x={},b=0,w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===b){if(!c)for(c={};t=Mt.exec(a);)c[t[1].toLowerCase()]=t[2];t=c[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===b?a:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return b||(e=x[n]=x[n]||e,v[e]=t),this},overrideMimeType:function(e){return b||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(b<2)for(t in e)y[t]=[y[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),C(0,t),this}};if(g.promise(T).complete=m.add,T.success=T.done,T.error=T.fail,d.url=((t||d.url||Xt)+"").replace(Ot,"").replace(Bt,Ut[1]+"//"),d.type=n.method||n.type||d.method||d.type,d.dataTypes=h.trim(d.dataType||"*").toLowerCase().match(I)||[""],null==d.crossDomain&&(i=$t.exec(d.url.toLowerCase()),d.crossDomain=!(!i||i[1]===Ut[1]&&i[2]===Ut[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(Ut[3]||("http:"===Ut[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=h.param(d.data,d.traditional)),Gt(Qt,d,n,T),2===b)return T;for(r in(l=h.event&&d.global)&&0==h.active++&&h.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Rt.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(Pt.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(d.url=Ft.test(o)?o.replace(Ft,"$1_="+qt++):o+(Pt.test(o)?"&":"?")+"_="+qt++)),d.ifModified&&(h.lastModified[o]&&T.setRequestHeader("If-Modified-Since",h.lastModified[o]),h.etag[o]&&T.setRequestHeader("If-None-Match",h.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||n.contentType)&&T.setRequestHeader("Content-Type",d.contentType),T.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+zt+"; q=0.01":""):d.accepts["*"]),d.headers)T.setRequestHeader(r,d.headers[r]);if(d.beforeSend&&(!1===d.beforeSend.call(f,T,d)||2===b))return T.abort();for(r in w="abort",{success:1,error:1,complete:1})T[r](d[r]);if(u=Gt(Wt,d,n,T)){if(T.readyState=1,l&&p.trigger("ajaxSend",[T,d]),2===b)return T;d.async&&d.timeout>0&&(s=e.setTimeout(function(){T.abort("timeout")},d.timeout));try{b=1,u.send(v,C)}catch(e){if(!(b<2))throw e;C(-1,e)}}else C(-1,"No Transport");function C(t,n,i,r){var c,v,x,w,C,k=n;2!==b&&(b=2,s&&e.clearTimeout(s),u=void 0,a=r||"",T.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(w=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)o=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){o=a;break}i||(i=a)}o=o||i}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,T,i)),w=function(e,t,n,i){var r,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(r in u)if((s=r.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[r]:!0!==u[r]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(d,w,T,c),c?(d.ifModified&&((C=T.getResponseHeader("Last-Modified"))&&(h.lastModified[o]=C),(C=T.getResponseHeader("etag"))&&(h.etag[o]=C)),204===t||"HEAD"===d.type?k="nocontent":304===t?k="notmodified":(k=w.state,v=w.data,c=!(x=w.error))):(x=k,!t&&k||(k="error",t<0&&(t=0))),T.status=t,T.statusText=(n||k)+"",c?g.resolveWith(f,[v,k,T]):g.rejectWith(f,[T,k,x]),T.statusCode(y),y=void 0,l&&p.trigger(c?"ajaxSuccess":"ajaxError",[T,d,c?v:x]),m.fireWith(f,[T,k]),l&&(p.trigger("ajaxComplete",[T,d]),--h.active||h.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return h.get(e,t,n,"json")},getScript:function(e,t){return h.get(e,void 0,t,"script")}}),h.each(["get","post"],function(e,t){h[t]=function(e,n,i,r){return h.isFunction(n)&&(r=r||i,i=n,n=void 0),h.ajax(h.extend({url:e,type:t,dataType:r,data:n,success:i},h.isPlainObject(e)&&e))}}),h._evalUrl=function(e){return h.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},h.fn.extend({wrapAll:function(e){if(h.isFunction(e))return this.each(function(t){h(this).wrapAll(e.call(this,t))});if(this[0]){var t=h(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return h.isFunction(e)?this.each(function(t){h(this).wrapInner(e.call(this,t))}):this.each(function(){var t=h(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=h.isFunction(e);return this.each(function(n){h(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){h.nodeName(this,"body")||h(this).replaceWith(this.childNodes)}).end()}}),h.expr.filters.hidden=function(e){return f.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:function(e){if(!h.contains(e.ownerDocument||r,e))return!0;for(;e&&1===e.nodeType;){if("none"===((t=e).style&&t.style.display||h.css(t,"display"))||"hidden"===e.type)return!0;e=e.parentNode}var t;return!1}(e)},h.expr.filters.visible=function(e){return!h.expr.filters.hidden(e)};var Jt=/%20/g,Kt=/\[\]$/,Zt=/\r?\n/g,en=/^(?:submit|button|image|reset|file)$/i,tn=/^(?:input|select|textarea|keygen)/i;function nn(e,t,n,i){var r;if(h.isArray(t))h.each(t,function(t,r){n||Kt.test(e)?i(e,r):nn(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==h.type(t))i(e,t);else for(r in t)nn(e+"["+r+"]",t[r],n,i)}h.param=function(e,t){var n,i=[],r=function(e,t){t=h.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=h.ajaxSettings&&h.ajaxSettings.traditional),h.isArray(e)||e.jquery&&!h.isPlainObject(e))h.each(e,function(){r(this.name,this.value)});else for(n in e)nn(n,e[n],t,r);return i.join("&").replace(Jt,"+")},h.fn.extend({serialize:function(){return h.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=h.prop(this,"elements");return e?h.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!h(this).is(":disabled")&&tn.test(this.nodeName)&&!en.test(e)&&(this.checked||!Z.test(e))}).map(function(e,t){var n=h(this).val();return null==n?null:h.isArray(n)?h.map(n,function(e){return{name:t.name,value:e.replace(Zt,"\r\n")}}):{name:t.name,value:n.replace(Zt,"\r\n")}}).get()}}),h.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?ln():r.documentMode>8?sn():/^(get|post|head|put|delete|options)$/i.test(this.type)&&sn()||ln()}:sn;var rn=0,on={},an=h.ajaxSettings.xhr();function sn(){try{return new e.XMLHttpRequest}catch(e){}}function ln(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}e.attachEvent&&e.attachEvent("onunload",function(){for(var e in on)on[e](void 0,!0)}),f.cors=!!an&&"withCredentials"in an,(an=f.ajax=!!an)&&h.ajaxTransport(function(t){var n;if(!t.crossDomain||f.cors)return{send:function(i,r){var o,a=t.xhr(),s=++rn;if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];for(o in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)void 0!==i[o]&&a.setRequestHeader(o,i[o]+"");a.send(t.hasContent&&t.data||null),n=function(e,i){var o,l,u;if(n&&(i||4===a.readyState))if(delete on[s],n=void 0,a.onreadystatechange=h.noop,i)4!==a.readyState&&a.abort();else{u={},o=a.status,"string"==typeof a.responseText&&(u.text=a.responseText);try{l=a.statusText}catch(e){l=""}o||!t.isLocal||t.crossDomain?1223===o&&(o=204):o=u.text?200:404}u&&r(o,l,u,a.getAllResponseHeaders())},t.async?4===a.readyState?e.setTimeout(n):a.onreadystatechange=on[s]=n:n()},abort:function(){n&&n(void 0,!0)}}}),h.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return h.globalEval(e),e}}}),h.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),h.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=r.head||h("head")[0]||r.documentElement;return{send:function(i,o){(t=r.createElement("script")).async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||o(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var un=[],cn=/(=)\?(?=&|$)|\?\?/;h.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=un.pop()||h.expando+"_"+qt++;return this[e]=!0,e}}),h.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,a,s=!1!==t.jsonp&&(cn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&cn.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=h.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(cn,"$1"+r):!1!==t.jsonp&&(t.url+=(Pt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||h.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){a=arguments},i.always(function(){void 0===o?h(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,un.push(r)),a&&h.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),h.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||r;var i=C.exec(e),o=!n&&[];return i?[t.createElement(i[1])]:(i=de([e],t,o),o&&o.length&&h(o).remove(),h.merge([],i.childNodes))};var dn=h.fn.load;function fn(e){return h.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}h.fn.load=function(e,t,n){if("string"!=typeof e&&dn)return dn.apply(this,arguments);var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=h.trim(e.slice(s,e.length)),e=e.slice(0,s)),h.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&h.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(i?h("<div>").append(h.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},h.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){h.fn[t]=function(e){return this.on(t,e)}}),h.expr.filters.animated=function(e){return h.grep(h.timers,function(t){return e===t.elem}).length},h.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,u=h.css(e,"position"),c=h(e),d={};"static"===u&&(e.style.position="relative"),s=c.offset(),o=h.css(e,"top"),l=h.css(e,"left"),("absolute"===u||"fixed"===u)&&h.inArray("auto",[o,l])>-1?(a=(i=c.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),h.isFunction(t)&&(t=t.call(e,n,h.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+r),"using"in t?t.using.call(e,d):c.css(d)}},h.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){h.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;return o?(t=o.documentElement,h.contains(t,r)?(void 0!==r.getBoundingClientRect&&(i=r.getBoundingClientRect()),n=fn(o),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===h.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),h.nodeName(e[0],"html")||(n=e.offset()),n.top+=h.css(e[0],"borderTopWidth",!0),n.left+=h.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-h.css(i,"marginTop",!0),left:t.left-n.left-h.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!h.nodeName(e,"html")&&"static"===h.css(e,"position");)e=e.offsetParent;return e||Qe})}}),h.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);h.fn[e]=function(i){return K(this,function(e,i,r){var o=fn(e);if(void 0===r)return o?t in o?o[t]:o.document.documentElement[i]:e[i];o?o.scrollTo(n?h(o).scrollLeft():r,n?r:h(o).scrollTop()):e[i]=r},e,i,arguments.length,null)}}),h.each(["top","left"],function(e,t){h.cssHooks[t]=Ue(f.pixelPosition,function(e,n){if(n)return n=ze(e,t),Be.test(n)?h(e).position()[t]+"px":n})}),h.each({Height:"height",Width:"width"},function(e,t){h.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){h.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===r?"margin":"border");return K(this,function(t,n,i){var r;return h.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?h.css(t,n,a):h.style(t,n,i,a)},t,o?i:void 0,o,null)}})}),h.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),h.fn.size=function(){return this.length},h.fn.andSelf=h.fn.addBack,"function"==typeof i&&i.amd&&i("jquery",[],function(){return h});var hn=e.jQuery,pn=e.$;return h.noConflict=function(t){return e.$===h&&(e.$=pn),t&&e.jQuery===h&&(e.jQuery=hn),h},t||(e.jQuery=e.$=h),h},"object"==typeof e&&"object"==typeof e.exports?e.exports=o.document?a(o,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return a(e)}:a(o),r("undefined"!=typeof jQuery?jQuery:window.jQuery)}).call(e,void 0,void 0,void 0,void 0,function(e){t.exports=e})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
